[{"name": "app.py", "content": "# Additional Python Notes\n# ------------------------\n# Capitalization matters in Python. Python is case-sensitive: min and Min are different.\n# Spelling matters in Python. You must match the spelling of functions and variables exactly.\n# Indentation matters in Python. Indentation is used to define code blocks and must be consistent.\n\n# Functions\n# ---------\n# Functions are used to group code together and make it more readable and reusable.\n# We define custom functions that can be called later in the code.\n# Functions are blocks of logic that can take inputs, perform work, and return outputs.\n\n# Defining Functions\n# ------------------\n# Define a function using the def keyword, followed by the function name, parentheses, and a colon. \n# The function name should describe what the function does.\n# In the parentheses, specify the inputs needed as arguments the function takes.\n\n# The function filtered_data() takes no arguments.\n# The function between(min, max) takes two arguments, a minimum and maximum value.\n# Arguments can be positional or keyword arguments, labeled with a parameter name.\n\n# The function body is indented (consistently!) after the colon. \n# Use the return keyword to return a value from a function.\n\n# Calling Functions\n# -----------------\n# Call a function by using its name followed by parentheses and any required arguments.\n\n# Decorators\n# ----------\n# Use the @ symbol to decorate a function with a decorator.\n# Decorators are a concise way of calling a function on a function.\n# We don't typically write decorators, but we often use them.\n\nimport plotly.express as px\nfrom shiny import App, ui, render, reactive, req\nfrom shinywidgets import output_widget, render_widget\nimport seaborn as sns\nfrom palmerpenguins import load_penguins\n\npenguins_df = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.layout_sidebar(\n        ui.sidebar(\n            ui.h2(\"Sidebar\"),\n            ui.input_selectize(\n                \"selected_attribute\",\n                \"Choose attribute\",\n                [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"]\n            ),\n            ui.input_numeric(\n                \"plotly_bin_count\",\n                \"Plotly Histogram Bins\",\n                10\n            ),\n            ui.input_slider(\n                \"seaborn_bin_count\",\n                \"Seaborn Histogram Bins\",\n                5, 50, 20\n            ),\n            ui.input_checkbox_group(\n                \"selected_species_list\",\n                \"Filter Species\",\n                [\"Adelie\", \"Gentoo\", \"Chinstrap\"],\n                selected=[\"Adelie\", \"Gentoo\", \"Chinstrap\"],\n                inline=True\n            ),\n            ui.hr(),\n            ui.a(\n                \"GitHub\",\n                href=\"https://github.com/teflxndxn/cintel-02-data\",\n                target=\"_blank\"\n            ),\n            open=\"open\"\n        ),\n        ui.layout_columns(\n            ui.output_data_frame(\"penguin_data_table\"),\n            ui.output_data_frame(\"penguin_data_grid\")\n        ),\n        ui.layout_columns(\n            output_widget(\"plotly_histogram\"),\n            ui.output_plot(\"seaborn_histogram\"),\n            ui.card(\n                ui.card_header(\"Plotly Scatterplot: Species\"),\n                output_widget(\"plotly_scatterplot\"),\n                full_screen=True\n            )\n        )\n    )\n)\n\ndef server(input, output, session):\n    @reactive.calc\n    def filtered_data():\n        # Ensure the user selected at least one species\n        req(input.selected_species_list())\n        \n        # Filter the DataFrame to only include selected species\n        return penguins_df[penguins_df[\"species\"].isin(input.selected_species_list())]\n\n    @render.data_frame\n    def penguin_data_table():\n        return filtered_data()\n\n    @render.data_frame\n    def penguin_data_grid():\n        return filtered_data()\n\n    @render_widget\n    def plotly_histogram():\n        col = input.selected_attribute()\n        bins = input.plotly_bin_count()\n        if not bins:\n            bins = 10\n        fig = px.histogram(\n            filtered_data(),\n            x=col,\n            nbins=int(bins),\n            color=\"species\",\n            title=f\"Plotly Histogram of {col}\"\n        )\n        return fig\n\n    @render.plot\n    def seaborn_histogram():\n        col = input.selected_attribute()\n        bins = input.seaborn_bin_count()\n        if not bins:\n            bins = 20\n        sns.histplot(\n            data=filtered_data(),\n            x=col,\n            bins=int(bins),\n            hue=\"species\"\n        )\n\n    @render_widget\n    def plotly_scatterplot():\n        fig = px.scatter(\n            filtered_data(),\n            x=\"bill_length_mm\",\n            y=\"flipper_length_mm\",\n            color=\"species\",\n            symbol=\"species\",\n            hover_data=[\"species\", \"island\"],\n            labels={\n                \"bill_length_mm\": \"Bill Length (mm)\",\n                \"flipper_length_mm\": \"Flipper Length (mm)\"\n            },\n            title=\"Bill Length vs Flipper Length by Species\"\n        )\n        return fig\n\napp = App(app_ui, server)\n", "type": "text"}]